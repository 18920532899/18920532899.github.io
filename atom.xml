<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>My blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-08-08T03:57:52.090Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>SuJiaxin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>P1256显示图像</title>
    <link href="http://example.com/2023/07/22/P1256%E6%98%BE%E7%A4%BA%E5%9B%BE%E5%83%8F/"/>
    <id>http://example.com/2023/07/22/P1256%E6%98%BE%E7%A4%BA%E5%9B%BE%E5%83%8F/</id>
    <published>2023-07-22T15:30:37.000Z</published>
    <updated>2023-08-08T03:57:52.090Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="显示图像"><a href="#显示图像" class="headerlink" title="显示图像"></a>显示图像</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>古老的显示屏是由 $N \times M$ 个像素（Pixel）点组成的。一个像素点的位置是根据所在行数和列数决定的。例如 $P(2,1)$ 表示第 $2$ 行第 $1$ 列的像素点。那时候，屏幕只能显示黑与白两种颜色，人们用二进制 $0$ 和 $1$ 来表示。$0$ 表示黑色，$1$ 表示白色。当计算机发出一个指令：$P(x,y)&#x3D;1$，则屏幕上的第 $x$ 行第 $y$ 列的阴极射线管就开始工作，使该像素点显示白色，若 $P(x,y)&#x3D;0$，则对应位置的阴极射线管不工作，像素点保持黑色。在某一单位时刻，计算机以 $N \times M$ 二维 $01$ 矩阵的方式发出显示整个屏幕图像的命令。</p><p>例如，屏幕是由 $3 \times 4$ 的像素点组成，在某单位时刻，计算机发出如下命令：</p><p>$$\begin{pmatrix}<br>0 &amp; 0 &amp; 0 &amp; 1 \<br>0 &amp; 0 &amp; 1 &amp; 1 \<br>0 &amp; 1 &amp; 1 &amp; 0 \<br>\end{pmatrix}$$</p><p>对应屏幕显示应为：</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/17pfiqr1.png"></p><p>假设放大后，一个格子表示一个像素点。</p><p>由于未知的原因，显示黑色的像素点总是受显示白色的像素点的影响——可能是阴极射线管工作的作用。并且，距离越近，影响越大。这里的距离定义如下：</p><p>设有像素点 $P_1(x_1,y_1)$ 和像素点 $P_2(x_2,y_2)$，则它们之间的距离 $D(P_1,P_2)&#x3D;|x_1-x_2|+|y_1-y_2|$。</p><p>在某一时刻，计算机发出显示命令后，科学家们期望知道，每个像素点和其最近的显示白色的像素点之间的最短距离是多少——科学家们保证屏幕上至少有一个显示白色的像素点。</p><p>上面的例子中，像素 $P(1,1)$ 与最近的白色像素点之间的距离为 $3$，而像素 $P(3,2)$ 本身显示白色，所以最短距离为 $0$。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行有两个数字，$N$ 和 $M\ (1 \le N,M \le 182)$，表示屏幕的规格。</p><p>以下 $N$ 行，每行 $M$ 个数字，$0$ 或 $1$。为计算机发出的显示命令。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出文件有 $N$ 行，每行 $M$ 个数字，中间用 $1$ 个空格分开。第 $i$ 行第 $j$ 列的数字表示距像素点 $P(i,j)$ 最近的白色像素点的最短距离。</p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3 4</span><br><span class="line">0001</span><br><span class="line">0011</span><br><span class="line">0110</span><br></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3 2 1 0</span><br><span class="line">2 1 0 0</span><br><span class="line">1 0 0 1</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><ul><li>对于 $30%$ 的数据：$N\times M \le 10000$；</li><li>对于 $100%$ 的数据：$N\times M \le 182^2$。</li></ul><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><h2 id="解题关键"><a href="#解题关键" class="headerlink" title="解题关键"></a>解题关键</h2><p>以字符串数组的形式读入数据，并将数据拆分写入二维整型数组中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">for(i=0;i&lt;N;i++)&#123;</span><br><span class="line">    scanf(&quot;%s&quot;,&amp;ch[i]); //%s输入字符串</span><br><span class="line">&#125;</span><br><span class="line">for(i=0;i&lt;N;i++)&#123;</span><br><span class="line">    for(j=0;j&lt;M;j++)&#123;</span><br><span class="line">        A[i][j]=ch[i][j]-48;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="主要思路"><a href="#主要思路" class="headerlink" title="主要思路"></a>主要思路</h2><p>将输入为1的位置标记为0，用二维整型数组B储存遍历每一个1时所有格子应标记的值，用二维整型数组C储存最终的值，将数组B中对应位置的值与数组C中比较，若B中的值小于C中的值，则将C中的值改为B中的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">for(i=0;i&lt;N;i++)&#123;</span><br><span class="line">    for(j=0;j&lt;M;j++)&#123;</span><br><span class="line">        if(A[i][j]==1)&#123;</span><br><span class="line">            for(a=0;a&lt;N;a++)&#123;</span><br><span class="line">                for(b=0;b&lt;M;b++)&#123;</span><br><span class="line">                    if(a&lt;=i&amp;&amp;b&lt;=j)&#123;</span><br><span class="line">                        B[a][b]=i+j-a-b;</span><br><span class="line">                    &#125;</span><br><span class="line">                    if(a&gt;=i&amp;&amp;b&lt;=j)&#123;</span><br><span class="line">                        B[a][b]=a-i+j-b;</span><br><span class="line">                    &#125;</span><br><span class="line">                    if(a&lt;=i&amp;&amp;b&gt;=j)&#123;</span><br><span class="line">                        B[a][b]=i-a+b-j;</span><br><span class="line">                    &#125;</span><br><span class="line">                    if(a&gt;=i&amp;&amp;b&gt;=j)&#123;</span><br><span class="line">                        B[a][b]=a-i+b-j;</span><br><span class="line">                    &#125;</span><br><span class="line">                    if(B[a][b]&lt;C[a][b])&#123;</span><br><span class="line">                        C[a][b]=B[a][b];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#define n 182</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int N,M,i,j,a,b,x,y;</span><br><span class="line">    int A[n][n]=&#123;0&#125;;</span><br><span class="line">    int C[n][n];</span><br><span class="line">    int B[n][n]=&#123;0&#125;;</span><br><span class="line">    char ch[n][n];</span><br><span class="line">    scanf(&quot;%d%d&quot;,&amp;N,&amp;M);</span><br><span class="line">    for(i=0;i&lt;N;i++)&#123;</span><br><span class="line">        scanf(&quot;%s&quot;,&amp;ch[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    for(i=0;i&lt;N;i++)&#123;</span><br><span class="line">        for(j=0;j&lt;M;j++)&#123;</span><br><span class="line">            A[i][j]=ch[i][j]-48;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    for(i=0;i&lt;N;i++)&#123;</span><br><span class="line">        for(j=0;j&lt;M;j++)&#123;</span><br><span class="line">            if(A[i][j]==1)&#123;</span><br><span class="line">                C[i][j]=0;</span><br><span class="line">            &#125;</span><br><span class="line">            else&#123;</span><br><span class="line">                C[i][j]=33124;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    for(i=0;i&lt;N;i++)&#123;</span><br><span class="line">        for(j=0;j&lt;M;j++)&#123;</span><br><span class="line">            if(A[i][j]==1)&#123;</span><br><span class="line">                for(a=0;a&lt;N;a++)&#123;</span><br><span class="line">                    for(b=0;b&lt;M;b++)&#123;</span><br><span class="line">                        if(a&lt;=i&amp;&amp;b&lt;=j)&#123;</span><br><span class="line">                            B[a][b]=i+j-a-b;</span><br><span class="line">                        &#125;</span><br><span class="line">                        if(a&gt;=i&amp;&amp;b&lt;=j)&#123;</span><br><span class="line">                            B[a][b]=a-i+j-b;</span><br><span class="line">                        &#125;</span><br><span class="line">                        if(a&lt;=i&amp;&amp;b&gt;=j)&#123;</span><br><span class="line">                            B[a][b]=i-a+b-j;</span><br><span class="line">                        &#125;</span><br><span class="line">                        if(a&gt;=i&amp;&amp;b&gt;=j)&#123;</span><br><span class="line">                            B[a][b]=a-i+b-j;</span><br><span class="line">                        &#125;</span><br><span class="line">                        if(B[a][b]&lt;C[a][b])&#123;</span><br><span class="line">                            C[a][b]=B[a][b];</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    for(i=0;i&lt;N-1;i++)&#123;</span><br><span class="line">        for(j=0;j&lt;M-1;j++)&#123;</span><br><span class="line">            printf(&quot;%d &quot;,C[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;%d\n&quot;,C[i][j]);</span><br><span class="line">    &#125;</span><br><span class="line">    for(j=0;j&lt;M-1;j++)&#123;</span><br><span class="line">        printf(&quot;%d &quot;,C[i][j]);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;%d&quot;,C[i][j]);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>P1003铺地毯</title>
    <link href="http://example.com/2023/07/22/P1003%E9%93%BA%E5%9C%B0%E6%AF%AF/"/>
    <id>http://example.com/2023/07/22/P1003%E9%93%BA%E5%9C%B0%E6%AF%AF/</id>
    <published>2023-07-22T15:29:39.000Z</published>
    <updated>2023-08-07T10:29:48.238Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="NOIP2011-提高组-铺地毯"><a href="#NOIP2011-提高组-铺地毯" class="headerlink" title="[NOIP2011 提高组] 铺地毯"></a>[NOIP2011 提高组] 铺地毯</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>为了准备一个独特的颁奖典礼，组织者在会场的一片矩形区域（可看做是平面直角坐标系的第一象限）铺上一些矩形地毯。一共有 $n$ 张地毯，编号从 $1$ 到 $n$。现在将这些地毯按照编号从小到大的顺序平行于坐标轴先后铺设，后铺的地毯覆盖在前面已经铺好的地毯之上。</p><p>地毯铺设完成后，组织者想知道覆盖地面某个点的最上面的那张地毯的编号。注意：在矩形地毯边界和四个顶点上的点也算被地毯覆盖。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入共 $n + 2$ 行。</p><p>第一行，一个整数 $n$，表示总共有 $n$ 张地毯。</p><p>接下来的 $n$ 行中，第 $i+1$ 行表示编号 $i$ 的地毯的信息，包含四个整数 $a ,b ,g ,k$，每两个整数之间用一个空格隔开，分别表示铺设地毯的左下角的坐标 $(a, b)$ 以及地毯在 $x$ 轴和 $y$ 轴方向的长度。</p><p>第 $n + 2$ 行包含两个整数 $x$ 和 $y$，表示所求的地面的点的坐标 $(x, y)$。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出共 $1$ 行，一个整数，表示所求的地毯的编号；若此处没有被地毯覆盖则输出 <code>-1</code>。</p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1 0 2 3</span><br><span class="line">0 2 3 3</span><br><span class="line">2 1 3 3</span><br><span class="line">2 2</span><br></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h2 id="样例-2"><a href="#样例-2" class="headerlink" title="样例 #2"></a>样例 #2</h2><h3 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入 #2"></a>样例输入 #2</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1 0 2 3</span><br><span class="line">0 2 3 3</span><br><span class="line">2 1 3 3</span><br><span class="line">4 5</span><br></pre></td></tr></table></figure><h3 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出 #2"></a>样例输出 #2</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>【样例解释 1】</p><p>如下图，$1$ 号地毯用实线表示，$2$ 号地毯用虚线表示，$3$ 号用双实线表示，覆盖点 $(2,2)$ 的最上面一张地毯是 $3$ 号地毯。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/gcm3ne0q.png"></p><p>【数据范围】</p><p>对于 $30%$ 的数据，有 $n \le 2$。<br>对于 $50%$ 的数据，$0 \le a, b, g, k \le 100$。<br>对于 $100%$ 的数据，有 $0 \le n \le 10^4$, $0 \le a, b, g, k \le {10}^5$。   </p><p>noip2011 提高组 day1 第 $1$ 题。</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><h2 id="解题关键"><a href="#解题关键" class="headerlink" title="解题关键"></a>解题关键</h2><p>创建结构体数组储存地毯长度、坐标有关信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">struct location&#123;</span><br><span class="line">    int a; //地毯左下角横坐标</span><br><span class="line">    int b; //地毯左下角纵坐标</span><br><span class="line">    int c; //地毯在横坐标的长度</span><br><span class="line">    int d; //地毯在纵坐标的长度</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="主要思路"><a href="#主要思路" class="headerlink" title="主要思路"></a>主要思路</h2><p>从最上面一层地毯开始查找，若坐标在本次地毯包含范围之内，输出地毯层数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for(i=n;i&gt;0;i--)&#123;</span><br><span class="line">    if(x&gt;=l[i].a&amp;&amp;x&lt;=l[i].a+l[i].c&amp;&amp;y&gt;=l[i].b&amp;&amp;y&lt;=l[i].b+l[i].d)&#123;</span><br><span class="line">        printf(&quot;%d\n&quot;,i);</span><br><span class="line">        mode=0;</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#define N 100000</span><br><span class="line">struct location&#123;</span><br><span class="line">    int a;</span><br><span class="line">    int b;</span><br><span class="line">    int c;</span><br><span class="line">    int d;</span><br><span class="line">&#125;;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    struct location l[N];</span><br><span class="line">    int n,i,x,y,mode=1;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">    for(i=1;i&lt;=n;i++)&#123;</span><br><span class="line">        scanf(&quot;%d%d%d%d&quot;,&amp;l[i].a,&amp;l[i].b,&amp;l[i].c,&amp;l[i].d);</span><br><span class="line">    &#125;</span><br><span class="line">    scanf(&quot;%d%d&quot;,&amp;x,&amp;y);</span><br><span class="line">    for(i=n;i&gt;0;i--)&#123;</span><br><span class="line">        if(x&gt;=l[i].a&amp;&amp;x&lt;=l[i].a+l[i].c&amp;&amp;y&gt;=l[i].b&amp;&amp;y&lt;=l[i].b+l[i].d)&#123;</span><br><span class="line">            printf(&quot;%d\n&quot;,i);</span><br><span class="line">            mode=0;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if(mode==1)&#123;</span><br><span class="line">        printf(&quot;-1\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
</feed>
